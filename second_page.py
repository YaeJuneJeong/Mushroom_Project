# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled3.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import threading

import requests
from PyQt5 import QtCore, QtGui, QtWidgets, Qt
import cv2
import numpy as np
from PyQt5.QtCore import pyqtSlot, QThread, pyqtSignal, QObject
from PyQt5.QtGui import QPixmap
from PyQt5.QtWidgets import QMessageBox, QWidget, QMainWindow

# from last_page import Ui_LastWindow
import pyrealsense2 as rs

SERVER_URL = 'http://184.73.45.24/api'  # 서버 url
PIN = '107512'  # 기기 고유 핀번호


pipeline = rs.pipeline()
config = rs.config()
config.enable_stream(rs.stream.depth, 640, 480, rs.format.z16, 30)
config.enable_stream(rs.stream.color, 640, 480, rs.format.bgr8, 30)

def drawline(img, pt1, pt2, color, thickness=3, style='dotted', gap=30):
    dist = ((pt1[0] - pt2[0]) ** 2 + (pt1[1] - pt2[1]) ** 2) ** .5
    pts = []
    for i in np.arange(0, dist, gap):
        r = i / dist
        x = int((pt1[0] * (1 - r) + pt2[0] * r) + .5)
        y = int((pt1[1] * (1 - r) + pt2[1] * r) + .5)
        p = (x, y)
        pts.append(p)

    if style == 'dotted':
        for p in pts:
            cv2.circle(img, p, thickness, color, -1)
    else:
        s = pts[0]
        e = pts[0]
        i = 0
        for p in pts:
            s = e
            e = p
            if i % 2 == 1:
                cv2.line(img, s, e, color, thickness)
            i += 1


def drawpoly(img, pts, color, thickness=1, style='dotted', ):
    s = pts[0]
    e = pts[0]
    pts.append(pts.pop(0))
    for p in pts:
        s = e
        e = p
        drawline(img, s, e, color, thickness, style)


def drawrect(img, pt1, pt2, color, thickness=1, style='dotted'):
    pts = [pt1, (pt2[0], pt1[1]), pt2, (pt1[0], pt2[1])]
    drawpoly(img, pts, color, thickness, style)


class VideoThread(QThread):
    change_pixmap_signal = pyqtSignal(np.ndarray)

    def __init__(self):
        super().__init__()
        self._run_flag = False

    def run(self):
        # capture from web cam
        profile = pipeline.start()
        self._run_flag = True
        while self._run_flag:
            frames = pipeline.wait_for_frames()
            color_frame = frames.get_color_frame()
            img = np.asarray(color_frame.get_data())
            print(img)
            self.change_pixmap_signal.emit(img)
        # shut down capture system
        pipeline.stop()

    def stop(self):
        """Sets run flag to False and waits for thread to finish"""
        self._run_flag = False
        frames = pipeline.wait_for_frames()
        color_frame = frames.get_color_frame()
        color_image = np.asarray(color_frame.get_data())

        # take the only location of mushroom pot -> 1/3 * width,1/2*height
        recent_image = color_image[240:, 214:428]
        check_image = cv2.imread('./recent.jpg')[240:, 214:428]

        hist_recent = cv2.calcHist(recent_image, [1], None, [255], [0, 255])
        hist_check = cv2.calcHist(check_image, [1], None, [255], [0, 255])
        number = cv2.compareHist(hist_recent, hist_check, cv2.HISTCMP_CORREL)

        print(number)
        if number > 0.4:
            error_dialog = QtWidgets.QErrorMessage()
            error_dialog.showMessage('Oh no!')
        else:
            #            배지입력 확인
            #
            print('Success')
            response = requests.get(SERVER_URL + 'myfarm/status', params={'id': 2, 'status': 'true'})
        pipeline.stop()


class Ui_SecondWindow(QMainWindow):

    def __init__(self):
        super().__init__()
        self.take_picture = False
        self.thread = VideoThread()
    # def openWindow(self):
    #     self.window = QtWidgets.QMainWindow()
    #     self.ui = Ui_LastWindow()
    #     self.ui.setupUi(self.window)
    #     self.window.show()
    #     SecondWindow.destroy()

    def setupUi(self, SecondWindow):
        SecondWindow.setObjectName("SecondWindow")
        SecondWindow.resize(899, 526)
        self.temp = QtWidgets.QLabel(SecondWindow)
        self.temp.setGeometry(QtCore.QRect(310, 640, 251, 480))
        self.temp.setMaximumSize(QtCore.QSize(640, 480))
        self.temp.setObjectName("temp")

        self.pushButton = QtWidgets.QPushButton(SecondWindow)
        self.pushButton.setGeometry(QtCore.QRect(140, 400, 241, 91))
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QtWidgets.QPushButton(SecondWindow)
        self.pushButton_2.setGeometry(QtCore.QRect(470, 400, 241, 91))
        self.pushButton_2.setObjectName("pushButton_2")
        self.hum = QtWidgets.QLabel(SecondWindow)
        self.hum.setGeometry(QtCore.QRect(270, 40, 311, 71))
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.hum.setFont(font)
        self.hum.setTextFormat(QtCore.Qt.AutoText)
        self.hum.setAlignment(QtCore.Qt.AlignCenter)
        self.hum.setObjectName("hum")

        self.retranslateUi(SecondWindow)
        QtCore.QMetaObject.connectSlotsByName(SecondWindow)


    def retranslateUi(self, SecondWindow):
        _translate = QtCore.QCoreApplication.translate
        SecondWindow.setWindowTitle(_translate("SecondWindow", "SecondWindow"))
        self.pushButton.setText(_translate("SecondWindow", "사진 촬영"))
        self.pushButton_2.setText(_translate("SecondWindow", "배지 확인"))
        self.hum.setText(_translate("SecondWindow", "배지에 선을 맞추어 주세요"))

        self.pushButton.clicked.connect(self.start)
        self.thread.change_pixmap_signal.connect(self.update_image)

    def start(self):
        self.thread.start()

    @pyqtSlot(np.ndarray)
    def update_image(self, cv_img):
        """Updates the image_label with a new opencv image"""
        qt_img = self.convert_cv_qt(cv_img)
        self.temp.setPixmap(qt_img)

    def convert_cv_qt(self, cv_img):
        """Convert from an opencv image to QPixmap"""
        rgb_image = cv2.cvtColor(cv_img, cv2.COLOR_BGR2RGB)
        h, w, ch = rgb_image.shape
        bytes_per_line = ch * w
        convert_to_Qt_format = QtGui.QImage(rgb_image.data, w, h, bytes_per_line, QtGui.QImage.Format_RGB888)
        p = convert_to_Qt_format.scaled(self.disply_width, self.display_height, Qt.KeepAspectRatio)
        return QPixmap.fromImage(p)




    # def check(self):
    #     # profile = pipeline.start(config)
    #     profile = pipeline.start(config)
    #     frames = pipeline.wait_for_frames()
    #     color_frame = frames.get_color_frame()
    #     color_image = np.asarray(color_frame.get_data())
    #
    #     # take the only location of mushroom pot -> 1/3 * width,1/2*height
    #     recent_image = color_image[240:, 214:428]
    #     check_image = cv2.imread('./recent.jpg')[240:, 214:428]
    #
    #     hist_recent = cv2.calcHist(recent_image, [1], None, [255], [0, 255])
    #     hist_check = cv2.calcHist(check_image, [1], None, [255], [0, 255])
    #     number = cv2.compareHist(hist_recent, hist_check, cv2.HISTCMP_CORREL)
    #
    #     print(number)
    #     if number > 0.4:
    #         error_dialog = QtWidgets.QErrorMessage()
    #         error_dialog.showMessage('Oh no!')
    #     else:
    #             #            배지입력 확인
    #             #
    #         print('Success')
    #         response = requests.get(SERVER_URL + 'myfarm/status', params={'id': 2, 'status': 'true'})
    #
    #         self.stop()
    #     pipeline.stop()


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    SecondWindow = QtWidgets.QMainWindow()
    ui = Ui_SecondWindow()
    ui.setupUi(SecondWindow)
    SecondWindow.show()
    sys.exit(app.exec_())
